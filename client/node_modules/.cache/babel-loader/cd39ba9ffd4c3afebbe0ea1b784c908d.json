{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { authApiTokenUrl, authApiRefreshUrl, authApiRegisterUrl } from '../config/urlconfig';\nimport { apiUsername, apiPassword } from '../config/authcredentials';\nimport { handleResponse } from '../_helpers';\n\nvar jwt = require('jsonwebtoken');\n\nvar currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser')));\nexport var authenticationService = {\n  login: login,\n  logout: logout,\n  register: register,\n  checkIfTokenExpired: checkIfTokenExpired,\n  refreshToken: refreshToken,\n  currentUser: currentUserSubject.asObservable(),\n\n  get currentUserValue() {\n    return currentUserSubject.value;\n  }\n\n};\n\nfunction login(username, password) {\n  var encodedAuth = new Buffer(\"\".concat(apiUsername, \":\").concat(apiPassword)).toString('base64');\n  var requestOptions = {\n    method: 'POST',\n    headers: {\n      'Authorization': \"Basic \".concat(encodedAuth)\n    }\n  };\n  return fetch(\"\".concat(authApiTokenUrl, \"&username=\").concat(username, \"&password=\").concat(password), requestOptions).then(handleResponse).then(function (user) {\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    var currentUser = {\n      'username': username,\n      'tokendata': user\n    };\n    localStorage.setItem('currentUser', JSON.stringify(currentUser));\n    currentUserSubject.next(user);\n    return user;\n  });\n}\n\n;\n\nfunction register(username, password) {\n  var _this = this;\n\n  var requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: {\n      'username': username,\n      'password': password\n    }\n  };\n  fetch(authApiRegisterUrl, requestOptions).then(function (response) {\n    if (response.ok) {\n      _this.props.history.push(\"/login\");\n    } else {\n      _this.props.history.push(\"/register\");\n    }\n  });\n}\n\nfunction checkIfTokenExpired(user) {\n  var token = user.tokendata;\n  if (!token || token === 'undefined') return false;\n  var decodedToken = jwt.decode(token, {\n    complete: true\n  });\n  var dateNow = new Date();\n  return decodedToken.exp < dateNow.getTime();\n}\n\n;\n\nfunction refreshToken() {\n  var encodedAuth = new Buffer(\"\".concat(apiUsername, \":\").concat(apiPassword)).toString('base64');\n  var requestOptions = {\n    method: 'POST',\n    headers: {\n      'Authorization': \"Basic \".concat(encodedAuth)\n    }\n  };\n  var refreshToken = localStorage.getItem('currentUser').tokendata.refresh_token;\n  fetch(\"\".concat(authApiRefreshUrl, \"&refresh_token=\").concat(refreshToken), requestOptions).then(handleResponse).then(function (user) {\n    var currentUser = localStorage.getItem('currentUser');\n    var updatedUser = {\n      'username': currentUser.userName,\n      'tokendata': user\n    };\n    localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n    currentUserSubject.next(user);\n  });\n}\n\n;\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('currentUser');\n  currentUserSubject.next(null);\n}","map":{"version":3,"sources":["/Users/hajbo/BME/alkfelj/ALFHF2019-whyarewestillalive/client/src/_services/authentication.service.js"],"names":["BehaviorSubject","authApiTokenUrl","authApiRefreshUrl","authApiRegisterUrl","apiUsername","apiPassword","handleResponse","jwt","require","currentUserSubject","JSON","parse","localStorage","getItem","authenticationService","login","logout","register","checkIfTokenExpired","refreshToken","currentUser","asObservable","currentUserValue","value","username","password","encodedAuth","Buffer","toString","requestOptions","method","headers","fetch","then","user","setItem","stringify","next","body","response","ok","props","history","push","token","tokendata","decodedToken","decode","complete","dateNow","Date","exp","getTime","refresh_token","updatedUser","userName","removeItem"],"mappings":"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","sourcesContent":["import { BehaviorSubject } from 'rxjs';\n\nimport { authApiTokenUrl, authApiRefreshUrl, authApiRegisterUrl } from '../config/urlconfig';\nimport { apiUsername, apiPassword } from '../config/authcredentials';\nimport { handleResponse } from '../_helpers';\n\nvar jwt = require('jsonwebtoken');\nconst currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser')));\n\nexport const authenticationService = {\n    login,\n    logout,\n    register,\n    checkIfTokenExpired,\n    refreshToken,\n    currentUser: currentUserSubject.asObservable(),\n    get currentUserValue() { return currentUserSubject.value }\n};\n\nfunction login(username, password) {\n    var encodedAuth = new Buffer(`${apiUsername}:${apiPassword}`).toString('base64');\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Authorization': `Basic ${encodedAuth}`\n        }\n    };\n\n    return fetch(`${authApiTokenUrl}&username=${username}&password=${password}`, requestOptions)\n        .then(handleResponse)\n        .then(user => {\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\n            var currentUser = {\n                'username': username,\n                'tokendata': user\n            }\n            localStorage.setItem('currentUser', JSON.stringify(currentUser));\n            currentUserSubject.next(user);\n\n            return user;\n        });\n};\n\nfunction register(username, password) {\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: {\n            'username': username,\n            'password': password\n        }\n    };\n    fetch(authApiRegisterUrl, requestOptions)\n        .then(\n            (response) => {\n                if (response.ok) {\n                    this.props.history.push(\"/login\");\n                } else {\n                    this.props.history.push(\"/register\");\n                }\n            }\n        )\n}\n\nfunction checkIfTokenExpired(user) {\n    var token = user.tokendata;\n    if (!token || token === 'undefined') return false;\n    var decodedToken = jwt.decode(token, { complete: true });\n    var dateNow = new Date();\n    return (decodedToken.exp < dateNow.getTime());\n\n};\n\nfunction refreshToken() {\n    var encodedAuth = new Buffer(`${apiUsername}:${apiPassword}`).toString('base64');\n    const requestOptions = {\n        method: 'POST',\n        headers: {\n            'Authorization': `Basic ${encodedAuth}`\n        }\n    };\n    var refreshToken = localStorage.getItem('currentUser').tokendata.refresh_token;\n\n    fetch(`${authApiRefreshUrl}&refresh_token=${refreshToken}`, requestOptions)\n        .then(handleResponse)\n        .then(user => {\n            var currentUser = localStorage.getItem('currentUser');\n            var updatedUser = {\n                'username': currentUser.userName,\n                'tokendata': user\n            }\n            localStorage.setItem('currentUser', JSON.stringify(updatedUser));\n            currentUserSubject.next(user);\n        });\n};\n\nfunction logout() {\n    // remove user from local storage to log user out\n    localStorage.removeItem('currentUser');\n    currentUserSubject.next(null);\n}"]},"metadata":{},"sourceType":"module"}