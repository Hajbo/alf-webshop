{"ast":null,"code":"import _objectWithoutProperties from \"/Users/hajbo/BME/alkfelj/ALFHF2019-whyarewestillalive/client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/hajbo/BME/alkfelj/ALFHF2019-whyarewestillalive/client/src/_components/PrivateRoute.jsx\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { authenticationService } from '../_services';\nexport var PrivateRoute = function PrivateRoute(_ref) {\n  var Component = _ref.component,\n      rest = _objectWithoutProperties(_ref, [\"component\"]);\n\n  return React.createElement(Route, Object.assign({}, rest, {\n    render: function render(props) {\n      var currentUser = authenticationService.currentUserValue;\n\n      if (currentUser && authenticationService.checkIfTokenExpired()) {\n        try {\n          authenticationService.refreshToken();\n        } catch (err) {\n          console.log(err); // Error while refreshing the token, need to log in again\n\n          return React.createElement(Redirect, {\n            to: {\n              pathname: '/login',\n              state: {\n                from: props.location\n              }\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 15\n            },\n            __self: this\n          });\n        }\n      } else if (!currentUser) {\n        // not logged in so redirect to login page with the return url\n        return React.createElement(Redirect, {\n          to: {\n            pathname: '/login',\n            state: {\n              from: props.location\n            }\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        });\n      } // authorised so return component\n\n\n      return React.createElement(Component, Object.assign({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }));\n};","map":{"version":3,"sources":["/Users/hajbo/BME/alkfelj/ALFHF2019-whyarewestillalive/client/src/_components/PrivateRoute.jsx"],"names":["React","Route","Redirect","authenticationService","PrivateRoute","Component","component","rest","props","currentUser","currentUserValue","checkIfTokenExpired","refreshToken","err","console","log","pathname","state","from","location"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AAEA,SAASC,qBAAT,QAAsC,cAAtC;AAEA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe;AAAA,MAAcC,SAAd,QAAGC,SAAH;AAAA,MAA4BC,IAA5B;;AAAA,SACxB,oBAAC,KAAD,oBAAWA,IAAX;AAAiB,IAAA,MAAM,EAAE,gBAAAC,KAAK,EAAI;AAC9B,UAAMC,WAAW,GAAGN,qBAAqB,CAACO,gBAA1C;;AACA,UAAKD,WAAW,IAAIN,qBAAqB,CAACQ,mBAAtB,EAApB,EAAkE;AAC9D,YAAI;AACAR,UAAAA,qBAAqB,CAACS,YAAtB;AACH,SAFD,CAEE,OAAMC,GAAN,EAAW;AACTC,UAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EADS,CAET;;AACA,iBAAO,oBAAC,QAAD;AAAU,YAAA,EAAE,EAAE;AAAEG,cAAAA,QAAQ,EAAE,QAAZ;AAAsBC,cAAAA,KAAK,EAAE;AAAEC,gBAAAA,IAAI,EAAEV,KAAK,CAACW;AAAd;AAA7B,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;AACJ,OARD,MAQO,IAAI,CAACV,WAAL,EAAkB;AACrB;AACA,eAAO,oBAAC,QAAD;AAAU,UAAA,EAAE,EAAE;AAAEO,YAAAA,QAAQ,EAAE,QAAZ;AAAsBC,YAAAA,KAAK,EAAE;AAAEC,cAAAA,IAAI,EAAEV,KAAK,CAACW;AAAd;AAA7B,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,OAb6B,CAe9B;;;AACA,aAAO,oBAAC,SAAD,oBAAeX,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACH,KAjBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADwB;AAAA,CAArB","sourcesContent":["import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\nimport { authenticationService } from '../_services';\n\nexport const PrivateRoute = ({ component: Component, ...rest }) => (\n    <Route {...rest} render={props => {\n        const currentUser = authenticationService.currentUserValue;\n        if ( currentUser && authenticationService.checkIfTokenExpired() ) {\n            try {\n                authenticationService.refreshToken();\n            } catch(err) {\n                console.log(err);\n                // Error while refreshing the token, need to log in again\n                return <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\n            }\n        } else if (!currentUser) {\n            // not logged in so redirect to login page with the return url\n            return <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\n        }\n\n        // authorised so return component\n        return <Component {...props} />\n    }} />\n)"]},"metadata":{},"sourceType":"module"}